{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","username","name","avatar","location","repos","followers","following","homeUrl","notFound","url","fetch","then","res","json","data","setState","login","avatar_url","public_repos","html_url","message","catch","error","console","log","this","fetchProfile","id","bind","className","href","target","title","React","Component","SearchProfile","onSubmit","handleForm","type","ref","placeholder","e","preventDefault","refs","value","Profile","repositories","src","alt","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOAKOA,G,wDACL,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,WACVC,KAAK,GACLC,OAAO,GACPC,SAAS,GACTC,MAAM,GACNC,UAAW,GACXC,UAAU,GACVC,QAAQ,GACRC,SAAS,IAXM,E,yDAcNR,GAAW,IAAD,OACjBS,EAAG,UAjBC,+BAiBD,YAAaT,GACpBU,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZf,SAAUc,EAAKE,MACff,KAAMa,EAAKb,KACXC,OAAQY,EAAKG,WACbd,SAAUW,EAAKX,SACfC,MAAOU,EAAKI,aACZb,UAAWS,EAAKT,UAChBC,UAAWQ,EAAKR,UAChBC,QAASO,EAAKK,SACdX,SAAUM,EAAKM,aAGlBC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,iC,0CAGhCC,KAAKC,aAAaD,KAAK1B,MAAMC,Y,+BAG7B,OACE,6BACG,6BAAS2B,GAAG,QACV,kBAAC,EAAD,CAAeD,aAAcD,KAAKC,aAAaE,KAAKH,QACpD,kBAAC,EAAD,CAASX,KAAMW,KAAK1B,SAErB,0BAAM8B,UAAU,cAAhB,4BAAsD,uBAAGC,KAAK,mDAAmDC,OAAO,SAASC,MAAM,gBAAe,kD,GA5C7IC,IAAMC,YAiDnBC,E,uKAEF,OACE,yBAAKN,UAAU,eACZ,0BAAMO,SAAUX,KAAKY,WAAWT,KAAKH,OACnC,+BAAO,2BAAOa,KAAK,SAASC,IAAI,WAAWC,YAAY,gC,iCAMrDC,GACVA,EAAEC,iBACD,IAAI1C,EAAWyB,KAAKkB,KAAK3C,SAAS4C,MAClCnB,KAAK3B,MAAM4B,aAAa1B,GACxByB,KAAKkB,KAAK3C,SAAS4C,MAAQ,O,GAfHX,IAAMC,WAmB5BW,E,uKAEF,IAAI/B,EAAOW,KAAK3B,MAAMgB,KAClBT,EAAS,UAAMS,EAAKP,QAAX,cACTuC,EAAY,UAAMhC,EAAKP,QAAX,qBACZD,EAAS,UAAMQ,EAAKP,QAAX,cACb,MAAsB,cAAlBO,EAAKN,SAEJ,yBAAKqB,UAAU,YACZ,yCACA,2GAKJ,6BAASA,UAAU,mBACjB,yBAAKA,UAAU,yBACb,uBAAGC,KAAMhB,EAAKP,QAASwB,OAAO,SAASC,MAAOlB,EAAKb,MAAQa,EAAKd,UAAU,yBAAK+C,IAAKjC,EAAKZ,OAAQ8C,IAAKlC,EAAKd,YAC3G,4BAAI,uBAAG8B,KAAMhB,EAAKP,QAASyB,MAAOlB,EAAKd,SAAU+B,OAAO,UAAUjB,EAAKb,MAAQa,EAAKd,WACpF,4BAAKc,EAAKX,UAAY,sBAExB,yBAAK0B,UAAU,0BACb,4BACG,4BACG,uBAAGC,KAAMzB,EAAW0B,OAAO,SAASC,MAAM,uBAAsB,2BAAIlB,EAAKT,WAAc,6CAE1F,4BACG,uBAAGyB,KAAMgB,EAAcf,OAAO,SAASC,MAAM,yBAAwB,2BAAIlB,EAAKV,OAAU,gDAE3F,4BACG,uBAAG0B,KAAMxB,EAAWyB,OAAO,SAASC,MAAM,uBAAsB,2BAAIlB,EAAKR,WAAc,oD,GA9BnF2B,IAAMC,WAuCbrC,ICpGKoD,QACW,cAA7BC,OAAO/C,SAASgD,UAEe,UAA7BD,OAAO/C,SAASgD,UAEhBD,OAAO/C,SAASgD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdzC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMF,a","file":"static/js/main.6ac6665c.chunk.js","sourcesContent":["import React from 'react';\nimport './scss/style.scss';\n\n\nconst API = 'https://api.github.com/users';\n class App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      username: 'tworrell',\n      name:'',\n      avatar:'',\n      location:'',\n      repos:'',\n      followers: '',\n      following:'',\n      homeUrl:'',\n      notFound:''\n    }\n  }\n  fetchProfile(username) { \n    let url = `${API}/${username}`;\n    fetch(url)\n      .then((res) => res.json() )\n      .then((data) => {\n        this.setState({\n          username: data.login,\n          name: data.name,\n          avatar: data.avatar_url,\n          location: data.location,\n          repos: data.public_repos,\n          followers: data.followers,\n          following: data.following,\n          homeUrl: data.html_url,\n          notFound: data.message\n        })\n      })\n      .catch((error) => console.log('Oops! An Error Occurred.') )\n  }\n  componentDidMount() {\n    this.fetchProfile(this.state.username);\n  }\n  render() {\n    return (\n      <div>\n         <section id=\"card\">\n           <SearchProfile fetchProfile={this.fetchProfile.bind(this)}/>\n           <Profile data={this.state} />\n         </section>\n          <span className=\"taraFooter\">GitHub-Find - Created By <a href=\"https://tworrell.github.io/TaraWorrellPortfolio/\" target=\"_blank\" title=\"Tara Worrell\"><b>Tara Worrell</b></a></span>\n      </div>\n    )\n  }\n}\nclass SearchProfile extends React.Component {\n  render() {\n    return (\n      <div className=\"search--box\">\n         <form onSubmit={this.handleForm.bind(this)}>\n           <label><input type=\"search\" ref=\"username\" placeholder=\"Enter Username + Enter\"/></label>\n         </form>\n      </div>\n    )\n  }\n  \n  handleForm(e) {\n   e.preventDefault();\n    let username = this.refs.username.value\n    this.props.fetchProfile(username);\n    this.refs.username.value = '';\n  }\n}\n\nclass Profile extends React.Component {\n  render() {\n    let data = this.props.data;\n    let followers = `${data.homeUrl}/followers`;\n    let repositories = `${data.homeUrl}?tab=repositories`;\n    let following = `${data.homeUrl}/following`;\n    if (data.notFound === 'Not Found')\n      return (\n         <div className=\"notfound\">\n            <h2>Uh Oh !!!</h2>\n            <p>The Component could not find what you were searching for. Please Try Again!</p>\n         </div>\n      );\n      else\n      return (\n        <section className=\"github--profile\">\n          <div className=\"github--profile__info\">\n            <a href={data.homeUrl} target=\"_blank\" title={data.name || data.username}><img src={data.avatar} alt={data.username}/></a>\n            <h2><a href={data.homeUrl} title={data.username} target=\"_blank\">{data.name || data.username}</a></h2>\n            <h3>{data.location || 'I Live In My Mind'}</h3>\n          </div>\n          <div className=\"github--profile__state\">\n            <ul>\n               <li>\n                  <a href={followers} target=\"_blank\" title=\"Number Of Followers\"><i>{data.followers}</i><span>Followers</span></a>\n               </li>\n               <li>\n                  <a href={repositories} target=\"_blank\" title=\"Number Of Repositoriy\"><i>{data.repos}</i><span>Repositories</span></a>\n               </li>\n               <li>\n                  <a href={following} target=\"_blank\" title=\"Number Of Following\"><i>{data.following}</i><span>Following</span></a>\n               </li>\n            </ul>\n          </div>\n        </section>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}